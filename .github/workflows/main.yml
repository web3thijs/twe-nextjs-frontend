name: Vercel Production Deployment
env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
on:
  push:
    branches:
      - main
jobs:
  prepare:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        job: [SonarCloud, Build]
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      
      - name: Cache Vercel CLI
        id: cache-vercel
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: vercel-cli-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            vercel-cli-${{ runner.os }}-

      - name: Install Vercel CLI
        if: steps.cache-vercel.outputs.cache-hit != 'true'
        run: npm install --global vercel@latest
      
      - name: SonarCloud Scan
        if: matrix.job == 'SonarCloud'
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          
      - name: Build Project Artifacts
        if: matrix.job == 'Build'
        run: |
          vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
          vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}

  Deploy-Production:
    needs: prepare
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      
      - name: Cache Vercel CLI
        id: cache-vercel
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: vercel-cli-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            vercel-cli-${{ runner.os }}-

      - name: Install Vercel CLI
        if: steps.cache-vercel.outputs.cache-hit != 'true'
        run: npm install --global vercel@latest
      
      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
      - name: Deploy Project Artifacts to Vercel
        run: vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}